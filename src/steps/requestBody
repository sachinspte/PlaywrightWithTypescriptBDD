import { Given, When, Then } from '@cucumber/cucumber';
import { expect } from '@playwright/test';
import fs from 'fs/promises';

Given('I send a POST request to {string} with data from {string}', async function (url: string, filePath: string) {
  // Read the request body from the JSON file
  const requestBody = await fs.readFile(filePath, 'utf-8');
  const parsedBody = JSON.parse(requestBody);

  // Perform the POST request using Playwright
  const response = await this.page.request.post(url, {
    data: parsedBody,
  });

  // Save the response for assertions
  this.response = response;
});

Then('the response status should be {int}', async function (statusCode: number) {
  // Check if the response status matches the expected status code
  expect(this.response.status()).toBe(statusCode);
});

Then('the response body should contain {string} with value {string}', async function (key: string, value: string) {
  // Parse and validate the response body
  const responseBody = await this.response.json();
  expect(responseBody[key]).toBe(value);
});

========================
Feature: Sending a POST request with data from a JSON file

  Scenario: Successfully sending a POST request
    Given I send a POST request to "https://jsonplaceholder.typicode.com/posts" with data from "requestBody.json"
    Then the response status should be 201
    And the response body should contain "title" with value "foo"

============================


import { Then } from '@cucumber/cucumber';
import { expect } from '@playwright/test';

Then(
  'the response body should contain {string} with value {string}',
  function (key: string, expectedValue: string) {
    if (!this.response) {
      throw new Error('No response found');
    }

    const responseBody = this.response.data;

    // Check if the key exists in the response
    expect(responseBody).toHaveProperty(key);

    const actualValue = responseBody[key];
    console.log(`Validating key: "${key}", Expected Value: "${expectedValue}", Actual Value: "${actualValue}"`);

    // Convert the expected value to its actual type
    let parsedExpectedValue: any = expectedValue;
    if (expectedValue === 'true' || expectedValue === 'false') {
      parsedExpectedValue = expectedValue === 'true'; // Convert to boolean
    } else if (!isNaN(Number(expectedValue))) {
      parsedExpectedValue = Number(expectedValue); // Convert to number
    } else if (expectedValue === '') {
      parsedExpectedValue = ''; // Empty string
    }

    // Validate the actual value matches the expected value
    expect(actualValue).toBe(parsedExpectedValue);
  }
);
====


import * as fs from 'fs';
import * as path from 'path';

/**
 * Reads a JSON file from the given path and returns the parsed JSON object.
 * @param jsonPath - The relative or absolute path to the JSON file.
 * @returns Parsed JSON object.
 * @throws Error if the file cannot be read or parsed.
 */
export async function readJsonFile(jsonPath: string): Promise<any> {
    try {
        const absolutePath = path.resolve(jsonPath); // Resolve to an absolute path
        const jsonData = fs.readFileSync(absolutePath, 'utf-8'); // Read file contents
        return JSON.parse(jsonData); // Parse and return JSON
    } catch (error) {
        throw new Error(`Failed to read or parse JSON file: ${error.message}`);
    }
}


==

import { test } from '@playwright/test';
import { readJsonFile } from './utils/readJsonFile'; // Assuming this file is in the 'utils' folder

test('Read JSON file and log its contents', async () => {
    const jsonPath = './request_body.json'; // Path to your JSON file
    const jsonData = await readJsonFile(jsonPath);
    console.log('Parsed JSON:', jsonData);
});
===
When I retrieve the project name with value "testing"

When('I retrieve the project name with value {string}', async (expectedValue: string) => {
  // Extract the project name
  retrievedProjectName = jsonResponse.Projects.find(
    (project: any) => project.ProjectName.Value === expectedValue
  )?.ProjectName.Value;
});

===
export interface SharedContext {
  apiResponses: { [key: string]: any }; // Store responses with a unique key
}

export const sharedContext: SharedContext = {
  apiResponses: {}, // Initialize an empty object to store responses
};

sharedContext.apiResponses['projectsResponse1'] = await response.json(); 

const apiResponse = sharedContext.apiResponses['projectsResponse1'];


===

import { Given, When, Then } from '@cucumber/cucumber';
import { expect } from '@playwright/test';

let jsonResponse: any;
let keyExists: boolean;

Given('I have the JSON response', async function () {
  jsonResponse = {
    Projects: [
      { Projectid: "123", ProjectName: { Value: "testing" } },
      { Projectid: "456", ProjectName: { Value: "testing1" } }
    ]
  };
});

When('I check for key {string} value {string} in the JSON response', async function (key: string, value: string) {
  keyExists = findKeyValueInJson(jsonResponse, key, value);
});

Then('I should see that {string} "{string}" exists', async function (key: string, value: string) {
  expect(keyExists).toBeTruthy();
});

/**
 * Recursively searches for a key-value pair in a JSON object.
 * @param json - The JSON object to search in.
 * @param key - The key to search for.
 * @param value - The value to validate.
 * @returns {boolean} - True if the key-value pair exists, otherwise false.
 */
function findKeyValueInJson(json: any, key: string, value: string): boolean {
  if (typeof json !== 'object' || json === null) {
    return false;
  }

  // Check if the key exists at the current level
  if (json[key] === value) {
    return true;
  }

  // Traverse nested objects or arrays
  if (Array.isArray(json)) {
    return json.some((item) => findKeyValueInJson(item, key, value));
  } else {
    return Object.values(json).some((val) => findKeyValueInJson(val, key, value));
  }
}

==
Feature: Verify Projectid in the JSON response

  Scenario: Check if Projectid contains 456
    Given I have the JSON response
    When I check for key "Projectid"  value "456" in the JSON response
    Then I should see that Projectid "456" exists


import { Given, When, Then } from '@cucumber/cucumber';
import { expect } from '@playwright/test';

let jsonResponse: any;
let keyExists: boolean;

Given('I have the JSON response', async function () {
  jsonResponse = {
    Projects: [
      { Projectid: "123", ProjectName: { Value: "testing" } },
      { Projectid: "456", ProjectName: { Value: "testing1" } }
    ]
  };
});

When('I check for key {string} value {string} in the JSON response', async function (key: string, value: string) {
  keyExists = findKeyValueInJson(jsonResponse, key, value);
});

Then('I should see that {string} "{string}" exists', async function (key: string, value: string) {
  expect(keyExists).toBeTruthy();
});

/**
 * Recursively searches for a key-value pair in a JSON object.
 * @param json - The JSON object to search in.
 * @param key - The key to search for.
 * @param value - The value to validate.
 * @returns {boolean} - True if the key-value pair exists, otherwise false.
 */
function findKeyValueInJson(json: any, key: string, value: string): boolean {
  if (typeof json !== 'object' || json === null) {
    return false;
  }

  // Check if the key exists at the current level
  if (json[key] === value) {
    return true;
  }

  // Traverse nested objects or arrays
  if (Array.isArray(json)) {
    return json.some((item) => findKeyValueInJson(item, key, value));
  } else {
    return Object.values(json).some((val) => findKeyValueInJson(val, key, value));
  }
}
+++++
function findKeyValueInJson(
  json: any,
  key: string,
  value: string,
  visited: Set<any> = new Set()
): boolean {
  // Avoid processing the same object repeatedly (for circular references)
  if (typeof json === 'object' && json !== null) {
    if (visited.has(json)) {
      return false;
    }
    visited.add(json);
  }

  if (typeof json !== 'object' || json === null) {
    return false;
  }

  if (json[key] === value) {
    return true;
  }

  if (Array.isArray(json)) {
    return json.some((item) => findKeyValueInJson(item, key, value, visited));
  } else {
    return Object.values(json).some((val) =>
      findKeyValueInJson(val, key, value, visited)
    );
  }
}


