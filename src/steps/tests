import { test } from '@playwright/test';
import * as fs from 'fs';

test('Store localStorage values with storageState and retrieve them', async ({ page }) => {
  // Navigate to the page and set up localStorage
  await page.goto('https://example.com');
  
  // Optionally, add an item to localStorage for testing purposes
  await page.evaluate(() => {
    localStorage.setItem('authToken', 'your-token-value');
  });

  // Save the storage state to a JSON file
  const storageFilePath = './storageState.json';
  await page.context().storageState({ path: storageFilePath });
  console.log(`Storage state saved to ${storageFilePath}`);

  // Read and parse the storage state JSON file to retrieve localStorage
  const storageState = JSON.parse(fs.readFileSync(storageFilePath, 'utf-8'));

  // Extract localStorage for a specific origin
  const localStorage = storageState.origins.find(
    (origin: any) => origin.origin === 'https://example.com'
  )?.localStorage;

  // Log the localStorage content
  console.log('localStorage for example.com:', localStorage);

  // If needed, you can access specific keys in localStorage
  const authToken = localStorage?.find((item: any) => item.name === 'authToken')?.value;
  console.log('authToken:', authToken);
});
====
globalContext.ts

import { World as CucumberWorld } from '@cucumber/cucumber';

export class CustomWorld implements CucumberWorld {
  apiToken?: string; // Store the token globally
  response?: any;    // Store the response for assertions
}

declare global {
  interface World {
    apiToken?: string;
    response?: any;
  }
}

==
cucumber.ts
import { setWorldConstructor } from '@cucumber/cucumber';
import { CustomWorld } from './globalContext';

setWorldConstructor(CustomWorld);
===


function saveToSessionStorage<T>(key: string, value: T): void {
  const valueToStore = typeof value === 'object' ? JSON.stringify(value) : String(value);
  sessionStorage.setItem(key, valueToStore);
}


=====

24/11
import fs from 'fs';

async function getAccessTokenFromJson(filePath: string): Promise<string | null> {
  // Read the JSON file
  const data = JSON.parse(fs.readFileSync(filePath, 'utf-8'));

  // Loop through the origins to find the matching localStorage entry
  for (const origin of data.origins) {
    for (const localStorageEntry of origin.localStorage) {
      if (localStorageEntry.name === 'firstName') {
        try {
          // Parse the value of the matching entry
          const valueObject = JSON.parse(localStorageEntry.value);
          // Extract the access_token if it exists
          return valueObject.authResult?.access_token || null;
        } catch (error) {
          console.error('Error parsing localStorage value:', error);
          return null;
        }
      }
    }
  }

  // If not found, return null
  return null;
}

// Usage example
(async () => {
  const filePath = './your-json-file.json'; // Replace with your JSON file path
  const accessToken = await getAccessTokenFromJson(filePath);
  if (accessToken) {
    console.log('Access Token:', accessToken);
  } else {
    console.log('Access Token not found.');
  }
})();


====+++=====
import fs from 'fs';

async function getAccessTokenFromJson(filePath: string): Promise<string | null> {
  const data = JSON.parse(fs.readFileSync(filePath, 'utf-8'));

  for (const origin of data.origins) {
    for (const localStorageEntry of origin.localStorage) {
      if (localStorageEntry.name === 'firstName') {
        try {
          const valueObject = JSON.parse(localStorageEntry.value);
          const accessToken = valueObject.authResult?.access_token || null;

          // Validate the format of the access token
          if (accessToken && accessToken.split('.').length === 3) {
            return accessToken; // Return if valid
          } else {
            console.warn('Access Token is not a valid JWT:', accessToken);
            return accessToken; // Return even if not a valid JWT
          }
        } catch (error) {
          console.error('Error parsing localStorage value:', error);
          return null;
        }
      }
    }
  }

  return null;
}

// Usage
(async () => {
  const filePath = './your-json-file.json'; // Replace with your JSON file path
  const accessToken = await getAccessTokenFromJson(filePath);
  if (accessToken) {
    console.log('Access Token:', accessToken);
  } else {
    console.log('Access Token not found.');
  }
})();



